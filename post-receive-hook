#!/usr/bin/env python

import fileinput
from rss_feed import rss_feed
import subprocess


ZERO_COMMIT = "0000000000000000000000000000000000000000"
BASE_PATH = "/home/git/rss/bioconductor.org/assets/developers/rss-feeds/"


def git_pull(cwd):
    """Git svn fetch branch."""
    cmd = ['git', '-C', cwd ,'pull']
    subprocess.check_call(cmd)
    return


def git_add(path, cwd, force=False):
    """Add files to git."""
    cmd = ['git', '-C', cwd, 'add', path]
    if force:
        cmd = ['git', '-C', cwd ,'add', '-f', path]
    subprocess.check_call(cmd)
    return


def git_commit(message, cwd):
    """Commit files to git server."""
    cmd = ['git', '-C', cwd, 'commit', '-m', message]
    subprocess.check_call(cmd)
    return


def git_push(cwd, remote="origin", branch="master"):
    """Git svn fetch branch."""
    cmd = ['git', '-C', cwd,  'push', remote, branch]
    subprocess.check_call(cmd)
    return


if __name__ == "__main__":
    # Path to feed.xml
    fpath = BASE_PATH + "gitlog.xml"
    fpath_release = BASE_PATH + "gitlog.release.xml"
    length = 200
    # Run function for RSS feed
#    f = open('/tmp/locktest', 'r')
    # FIXME obtain a lock
    # git -C "" pull
    for line in fileinput.input():
        std_input = line.split(" ")
        oldrev, newrev, refname = [item.strip() for item in std_input]
        # Check for zero commit, check branch deletions
        # also, avoid new package additions
        if (oldrev == ZERO_COMMIT or newrev == ZERO_COMMIT):
            continue
        # Split feed into correct files
        if ("RELEASE" in refname):
            # RSS-feed post-receive hook
            rss_feed(oldrev, newrev, refname, fpath_release, length)
        else:
            rss_feed(oldrev, newrev, refname, fpath, length)

    # commit to gitolite
    ## git -C "/home/git/rss/bioconductor.org/" add
    ## git -C "" commit
    ## git -C ""  push
    ### FIXME release the lock
